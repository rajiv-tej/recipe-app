{"version":3,"sources":["recipe.module.css","logo.svg","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","async","fetch","response","json","data","hits","onSubmit","e","preventDefault","action","value","onChange","target","type","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,0ECD1DD,EAAOC,QAAU,IAA0B,kC,yICuB5BC,EAnBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OAEE,yBAAKC,UAAWC,IAAMC,QACpB,4BAAKN,GAEL,4BACGG,EAAYI,KAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,UAIpB,2BAAIR,GAEJ,yBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,QC8DpCC,G,YA3EH,WAEV,IAFgB,EAMcC,mBAAS,IANvB,mBAMTC,EANS,KAMAC,EANA,OASYF,mBAAS,IATrB,mBASTG,EATS,KASDC,EATC,OAYUJ,mBAAS,WAZnB,mBAYTK,EAZS,KAYFC,EAZE,KAehBC,qBAAU,WACRC,MACC,CAACH,IAGJ,IAAMG,EAAa,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAEME,MAAM,mCAAD,OACSN,EADT,mBApBf,WAoBe,oBAnBd,sCAiBG,cAEXO,EAFW,kBAAAH,EAAA,MAMEG,EAASC,QANX,OAMXC,EANW,OAQjBZ,EAAWY,EAAKC,MARC,sCAwBnB,OACE,yBAAKxB,UAAU,OAEb,0BAAMyB,SAVQ,SAAAC,GAChBA,EAAEC,iBACFZ,EAASH,GAETC,EAAU,KAMmBb,UAAU,cAAc4B,OAAO,IACxD,2BACEC,MAAOjB,EACPkB,SAlBa,SAAAJ,GACnBb,EAAUa,EAAEK,OAAOF,QAkBb7B,UAAU,aACVgC,KAAK,SAGP,4BAAQhC,UAAU,gBAAgBgC,KAAK,UAAvC,WAKF,yBAAKhC,UAAU,WACZU,EAAQP,KAAI,SAAAD,GAAM,OACjB,kBAAC,EAAD,CACE+B,IAAK/B,EAAOA,OAAOgC,MACnBtC,MAAOM,EAAOA,OAAOgC,MACrBrC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,qBC5DnBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d6c4d1f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2dTO0\",\"image\":\"recipe_image__3JVSL\"};","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\n// destructuring\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    // style with CSS module\r\n    <div className={style.recipe}>\r\n      <h1>{title}</h1>\r\n      {/* map through ingredients */}\r\n      <ol>\r\n        {ingredients.map(ingredient => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      {/* display calories */}\r\n      <p>{calories}</p>\r\n      {/* style with CSS module */}\r\n      <img className={style.image} src={image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  // get id and key from api\r\n  const APP_ID = \"0e9797a8\";\r\n  const APP_KEY = \"0724a07225075007c2a1b68e7701cd4e\";\r\n\r\n  // state hook\r\n  const [recipes, setRecipes] = useState([]);\r\n\r\n  // the state of the input\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  // the state of the final input\r\n  const [query, setQuery] = useState(\"chicken\");\r\n\r\n  // call get recipes function when the browser loads\r\n  useEffect(() => {\r\n    getRecipes();\r\n  }, [query]);\r\n\r\n  // fetch recipes from api\r\n  const getRecipes = async () => {\r\n    // wait for information to load\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    // set data from the response and turn into into a JSON object\r\n    const data = await response.json();\r\n    // set state of recipes = the array of recipes\r\n    setRecipes(data.hits);\r\n  };\r\n\r\n  // set search = to whatever is being typed\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  // set the final search = to state of search\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    // reset search to empty string\r\n    setSearch(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* pass props down */}\r\n      <form onSubmit={getSearch} className=\"search-form\" action=\"\">\r\n        <input\r\n          value={search}\r\n          onChange={updateSearch}\r\n          className=\"search-bar\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n      {/* map through recipes */}\r\n      <div className=\"recipes\">\r\n        {recipes.map(recipe => (\r\n          <Recipe\r\n            key={recipe.recipe.label}\r\n            title={recipe.recipe.label}\r\n            calories={recipe.recipe.calories}\r\n            image={recipe.recipe.image}\r\n            ingredients={recipe.recipe.ingredients}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}